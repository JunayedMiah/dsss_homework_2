import unittest
from math_quiz import generate_random_value, random_operator, create_questions


class TestMathGame(unittest.TestCase):
    
    """ Unit tests for functions in the math quiz game. """

    def test_generate_random_value(self):
        """ Test if random numbers generated by 'generate_random_value' are within the specified range."""
        minimum_value = 1
        maximum_value = 10
        for _ in range(1000):  # Test a large number of random values
            rand_num = generate_random_value(minimum_value, maximum_value)
            
            # Assert that the random number is within the range
            self.assertTrue(minimum_value <= rand_num <= maximum_value, 
                            f"Generated number {rand_num} not within range {minimum_value} - {maximum_value}")
            

    def test_random_operator(self):
        """ Test if 'random_operator' selcts an operator from the valid set. """
        
        valid_operators = {'+', '-', '*', '/'}
        for _ in range(100): # Test a large number of operator selections
            operator = random_operator()
            # Assert that the operator is one of the valid choices
            self.assertIn(operator, valid_operators, 
                          f"Generated operator {operator} is not valid")

    def test_create_questions(self):
        """ Test if 'create_quesiton' generate the correct problem string and answer for given inputs."""
        test_cases = [
                # Format: (num1, num2, operator, expected_problem, expected_answer)
                (5, 2, '+', '5 + 2', 7),
                (10, 3, '-', '10 - 3', 7),
                (4, 6, '*', '4 * 6', 24),
                (10, 2, '/', '10 / 2', 5),
                (7, 0, '+', '7 + 0', 7),  # Edge case with zero
                (0, 5, '*', '0 * 5', 0),  # Edge case with multiplication by zero
                (9, 1, '-', '9 - 1', 8),  # Simple subtraction
                (0, 2, '/', '0 / 2', 0),  # Simple division
                # Add more cases as needed for robustness
        ]

        for num1, num2, operator, expected_problem, expected_answer in test_cases:
                problem, answer = create_questions(num1, num2, operator)
                
                # Assert that the generated problem matches the expected format 
                self.assertEqual(problem, expected_problem,
                                 f"Expected Problem '{expected_problem}', got '{problem}")
                
                # Assert that the answer is correct 
                self.assertEqual(answer, expected_answer, 
                                f"Expected answer {expected_answer}, got {answer}")

if __name__ == "__main__":
    unittest.main()
